--DROPS DE LAS FUNCIONES
drop function FOM05_llenar_duracion();



--*********************FUNCIONES PARA LOS TRIGGERS

CREATE OR REPLACE FUNCTION FOM05_LLENAR_DURACION() 
RETURNS TRIGGER AS $$

DECLARE 
HORA_INICIO TIME;
HORA_FIN TIME;
HORA	 TIME;
ID 	 INTEGER;

BEGIN

	SELECT HC_ID, HC_HORA_INICIO, HC_HORA_FIN INTO ID, HORA_INICIO, HORA_FIN
	FROM HORARIO_CLASE ORDER BY HC_ID DESC LIMIT 1; 
 
	HORA = HORA_FIN - HORA_INICIO;
	
	UPDATE HORARIO_CLASE SET HC_DURACION=HORA WHERE HC_ID=ID;
	
	RETURN NEW;
END $$ 
language plpgsql;

--******FUNCIONES QUE SE NECESITAN PARA EL WEB SERVICE****

--consultar toda la tabla de horario_clase en rango de 1 semana (entre lunes y sabado)
--consultar tabla de horario de clase que ya se halla participado para los comentarios

--AGREGAR USUARIO PARA QUE PARTICIPE EN LA CLASE
CREATE OR REPLACE FUNCTION M05_AGREGAR_PARTICIPACION(ID_USUARIO INTEGER, ID_HC INTEGER)
RETURNS VOID AS $$
DECLARE 
BEGIN 
	UPDATE HORARIO_CLASE 
	SET FK_USUARIO=ID_USUARIO 
	WHERE HC_ID = ID_HC ;
END $$
LANGUAGE PLPGSQL;

--ELIMINAR USUARIO DE LA PARTICIPACION
CREATE OR REPLACE FUNCTION M05_ELIMINAR_PARTICIPACION(ID_USUARIO INT, ID_CLASE_HORARIO INT)
RETURNS VOID AS $$
DECLARE 
BEGIN 
	UPDATE HORARIO_CLASE SET FK_USUARIO=NULL WHERE FK_USUARIO=ID_USUARIO AND HC_ID=ID_CLASE_HORARIO;
END $$
LANGUAGE PLPGSQL;

--LISTA DE CLASES RESERVADAS

CREATE OR REPLACE FUNCTION M05_LISTAR_RESERVAS(ID_USUARIO INT)
RETURNS TABLE (ID_HC INT , NOMBRE VARCHAR, INSTRUCTOR VARCHAR, FECHA DATE, DIA VARCHAR) AS  $$
DECLARE 
var_r record;
BEGIN
	for var_r in (SELECT HC_ID, CLA_NOMBRE, INS_NOMBRE, HC_FECHA, HC_DIA
			FROM HORARIO_CLASE, INSTRUCTOR, CLASE, USUARIO
			WHERE USU_ID = ID_USUARIO AND
			      USU_ID = FK_USUARIO AND CLA_ID=FK_CLASE AND FK_INSTRUCTOR = INS_ID)

	loop
	ID_HC:= var_r.HC_ID;
	NOMBRE:= var_r.CLA_NOMBRE;
	INSTRUCTOR:= var_r.INS_NOMBRE;
	FECHA:= var_r.HC_FECHA;
	DIA:=var_r.HC_DIA;
	
	
	return next;
	
end loop;
END 
$$
LANGUAGE PLPGSQL;

-- FUNCION QUE DEVUELVE CLASES

CREATE OR REPLACE FUNCTION M05_LISTA_CLASES() 
RETURNS TABLE (id int, fecha Date, clase varchar ,instructor varchar, descripcion varchar, capacidad int ) AS
$$
DECLARE 
var_r record;
BEGIN
for var_r in (Select HC_ID, HC_FECHA, CLA_NOMBRE, INS_NOMBRE, CLA_DESCRIPCION, HC_CAPACIDAD 
		from CLASE, HORARIO_CLASE, INSTRUCTOR 
		where CLA_ID=FK_CLASE AND INS_ID = FK_INSTRUCTOR)

loop
	id:= var_r.HC_ID;
	fecha:= var_r.HC_FECHA;
	clase:= var_r.CLA_NOMBRE;
	instructor:= var_r.INS_NOMBRE;
	descripcion:=var_r.CLA_DESCRIPCION;
	capacidad:= var_r.HC_CAPACIDAD;
	
	return next;
	
end loop;
	
	
END 
$$ 
language plpgsql;



--**********FUNCIONES PARA CRITICA*******

-- Metodo para traer todas las criticas de esa clase

CREATE OR REPLACE FUNCTION FOM05_LISTA_CRITICAS(referencia_hc int) 
RETURNS TABLE (id int, fecha Date, comentario varchar ,valoracion int ) AS
$$
DECLARE 
var_r record;
BEGIN
for var_r in (Select * from CRITICA where FK_HC_ID = referencia_hc)

loop
	id:= var_r.CRI_ID;
	fecha:= var_r.CRI_FECHA;
	comentario:= var_r.CRI_COMENTARIO;
	valoracion:= var_r.CRI_VALORACION;
	
	return next;
	
end loop;
	
	
END 
$$ 
language plpgsql;

--Metodo para agregar la critica a la clase

CREATE OR REPLACE FUNCTION M05_AGREGAR_CRITICA( COMENTARIO CHARACTER VARYING(400),VALORACION INT, REFERENCIA_HC INT)
RETURNS VOID AS $$
DECLARE 
BEGIN 
	INSERT INTO CRITICA(CRI_FECHA,CRI_COMENTARIO,CRI_VALORACION,FK_HC_ID) VALUES (current_date,COMENTARIO,VALORACION,REFERENCIA_HC);
END $$
LANGUAGE PLPGSQL;

--Metodo para eliminar critica

CREATE OR REPLACE FUNCTION M05_ELIMINAR_CRITICA(ID_CRITICA INT)
RETURNS VOID AS $$
DECLARE 
BEGIN 
	DELETE FROM CRITICA WHERE CRI_ID=ID_CRITICA;
END $$
LANGUAGE PLPGSQL;

--lista las clases en las que ya se participo y no se han comentado EN LOS ULTIMOS 30 DIAS

CREATE OR REPLACE FUNCTION M05_LISTA_CLASES_PARTICIPADAS(id int)
RETURNS TABLE (fecha Date, clase varchar, instructor_nombre varchar,instructor_apellido varchar, id_hc int) AS $$
DECLARE 
var_r record;
BEGIN 
     for var_r in (Select HC_ID, HC_FECHA, CLA_NOMBRE, INS_NOMBRE, INS_APELLIDO
     from HORARIO_CLASE , CLASE , INSTRUCTOR , USUARIO , CRITICA 
     where
     FK_USUARIO = ID and 
     USU_ID = FK_USUARIO and 
     INS_ID = FK_INSTRUCTOR and
     CLA_ID = FK_CLASE AND 
	--CRI_ID_USUARIO != 4 and 
     FK_HC_ID != HC_ID AND
     HC_FECHA BETWEEN CAST (CURRENT_DATE-30 AS DATE) AND CAST (CURRENT_DATE AS DATE)
     GROUP BY HC_ID, HC_FECHA, CLA_NOMBRE, INS_NOMBRE, INS_APELLIDO
     )
loop
	instructor_nombre:= var_r.INS_NOMBRE;
	fecha:= var_r.HC_FECHA;
	instructor_apellido:= var_r.INS_APELLIDO;
	clase:= var_r.CLA_NOMBRE;
	id_hc:= var_r.HC_ID;
	
	return next;
	
end loop;
	

END $$
LANGUAGE PLPGSQL;

--CONSULTA DE CLASES POR FECHA
CREATE OR REPLACE FUNCTION FOM05_CLASES_FECHA(fecha Date) 
RETURNS TABLE (id int, nombre varchar, descripcion varchar) AS
$$
DECLARE 

var_r record;

BEGIN

for var_r in (Select * from CLASE where cla_id in (Select fk_clase from Horario_Clase where hc_fecha=fecha))

loop
	id:= var_r.cla_id;
	nombre:= var_r.cla_nombre;
	descripcion:= var_r.cla_descripcion;
	
	return next;
	
end loop;
	
	
END 
$$ 
language plpgsql;

------ CONSULTA DE RESERVA

CREATE OR REPLACE FUNCTION FOM05_CONSULTAR_RESERVA(usuario int) 
RETURNS TABLE (id int, fechainicio Date, fechafin Date, username int, entrenador int) AS
$$
DECLARE 

var_r record;

BEGIN
for var_r in (Select * from RESERVA where fk_usuario=usuario)

loop
	id:= var_r.res_id;
	fechainicio:= var_r.res_fecha_ini;
	fechafin:= var_r.res_fecha_fin;
	username:= var_r.fk_usuario;
	entrenador:= var_r.fk_entrenador;
	
	return next;
	
end loop;
	
	
END 
$$ 
language plpgsql;

-- METODO PARA AGREGAR RESERVA
CREATE OR REPLACE FUNCTION M05_AGREGAR_RESERVA(FECHAINI DATE, FECHAFIN DATE,USUARIO INT, ENTRENADOR INT)
RETURNS VOID AS $$
DECLARE 
BEGIN 
	INSERT INTO RESERVA(RES_FECHA_INI,RES_FECHA_FIN,FK_USUARIO,FK_ENTRENADOR) VALUES (FECHAINI,FECHAFIN,USUARIO,ENTRENADOR);
END $$
LANGUAGE PLPGSQL;

--Metodo para eliminar RESERVA

CREATE OR REPLACE FUNCTION M05_ELIMINAR_RESERVA(RESERVA_ID INT)
RETURNS VOID AS $$
DECLARE 
BEGIN 
	DELETE FROM RESERVA WHERE RES_ID=RESERVA_ID;
END $$
LANGUAGE PLPGSQL;

--Consulta la clase en particular en base a la id 

CREATE OR REPLACE FUNCTION m05_get_horario_clase(id int)
  RETURNS TABLE(nombreclase character varying, instructor character varying, fecha date, 
		dia character varying, capacidad int, hora_inicio time, hora_fin time, descripcion varchar)
   AS $$
DECLARE
   var_r    record;
BEGIN
   FOR var_r IN(SELECT CLA_Nombre, INS_Nombre, HC_fecha, HC_dia, HC_capacidad, HC_hora_inicio, HC_hora_fin, CLA_descripcion
        FROM Horario_Clase, Clase, Instructor
	WHERE  id = HC_id and fk_Clase = CLA_id and fk_Instructor=INS_id)
   LOOP
    nombreclase = var_r.CLA_Nombre;
    instructor= var_r.INS_nombre;
    fecha = var_r.HC_fecha;
    dia = var_r.HC_dia;
    capacidad = var_r.HC_capacidad;
    hora_inicio = var_r.HC_hora_inicio;
    hora_fin = var_r.HC_hora_fin;
    descripcion = var_r.CLA_descripcion;
    RETURN NEXT;
   END LOOP;
END; $$
  LANGUAGE plpgsql;
