--**************************************************FUNCIONES PARA EL WEB SERVICE******************************************
-----Esta funcion devuelve las rutinas de un cliente con su dia y la cantidad de ejercicios

CREATE OR REPLACE FUNCTION FO_M03_get_rutina(usuario_CI int)
  RETURNS TABLE(nombre character varying, dia character varying, numEjerc int)
   AS $$
DECLARE
   _rutinas    record;
BEGIN
   FOR _rutinas IN(SELECT r.rut_nombre, r.rut_dia
        FROM rutina as r inner join  usuario as u on u.usu_id = r.fk_usuario
        WHERE u.usu_cedula = usuario_CI)
   LOOP
    nombre = _rutinas.rut_nombre;
    dia = _rutinas.rut_dia;
  --  numEjerc= _rutinas.ejercicio;
    RETURN NEXT;
   END LOOP;
END; $$
  LANGUAGE plpgsql;
/*
	AGREGAR RUTINA	
   	Funcion que agrega una nueva rutina, recibe el idUsuario, el nombre de la
    rutina y el dia a realizarse, no retorna ningun valor
*/
CREATE OR REPLACE FUNCTION FO_M03_set_rutina(idUsuario int, nombreRutina character varying, dia character varying)
  RETURNS VOID
   AS $$
DECLARE
BEGIN
  		 insert into rutina (rut_nombre, rut_dia, fk_usuario) values (nombreRutina, dia, idUsuario);
END; $$
  LANGUAGE plpgsql;
/*
	MODIFICAR RUTINA	
   	Funcion que modifica una rutina, recibe el idUsuario, el nombre de la
    rutina y el dia a realizarse, no retorna ningun valor
*/
CREATE OR REPLACE FUNCTION FO_M03_modificar_rutina(idUsuario int, nombreRutina character varying, dia character varying,
                                                  nombreModif character varying, diaModif character varying)
  RETURNS VOID
   AS $$
DECLARE
BEGIN
  		 update rutina  set (rut_nombre, rut_dia) = (nombreModif, diaModif) where fk_usuario= idUsuario 
         																	and rut_nombre=nombreRutina and rut_dia = dia;
END; $$
  LANGUAGE plpgsql;
  /*
	ELIMINAR RUTINA	
   	Funcion que elimina una rutina, recibe el idUsuario, el nombre de la
    rutina y el dia a realizarse, no retorna ningun valor
*/
CREATE OR REPLACE FUNCTION FO_M03_eliminar_rutina(idUsuario int, nombreRutina character varying, dia character varying)
  RETURNS VOID
   AS $$
DECLARE
BEGIN
  		 delete from rutina  where fk_usuario= idUsuario and rut_nombre = nombreRutina and rut_dia = dia;
END; $$
  LANGUAGE plpgsql;
    /*
	LISTA DE EJERCICIOS DE UNA RUTINA	
   	Funcion muestra todos los ejercicios de una rutina, recibe el idUsuario, el nombre de la
    rutina y el dia a realizarse, no retorna ningun valor
*/
CREATE OR REPLACE FUNCTION FO_M03_ejercicios_rutina(idUsuario int, nombreRutina character varying, dia character varying)
  RETURNS TABLE(idEjercicio int, nombre character varying,grupoMuscular character varying, maquina character varying,equipo character varying)
   AS $$
DECLARE
   _ejercicios    record;
BEGIN
   FOR _ejercicios IN(SELECT distinct(eje.eje_nombre), eje.eje_id, eje.eje_grupo_muscular, maq.maq_nombre, equ.equ_nombre
        FROM ejercicio as eje inner join  ejercicio_maquina_equipo as eme on eje.eje_id = eme.fk_ejercicio
        inner join maquina as maq on maq.maq_id= eme.fk_maquina
        inner join equipo as equ on equ.equ_id= eme.fk_equipo
        inner join rutina as rut on rut.rut_id= eme.fk_rutina
        inner join trabajo_rutina as tr on tr.fk_eje_maq_equ1 = eme.eme_id
        inner join usuario as usu on usu.usu_id = rut.fk_usuario
        inner join serie as ser on ser.fk_trabajo_rutina = tr.tr_id
        WHERE usu.usu_id = idUsuario and rut.rut_nombre= nombreRutina and rut.rut_dia= dia 
        )
   LOOP
    idEjercicio = _ejercicios.eje_id;
    nombre = _ejercicios.eje_nombre;
    grupoMuscular = _ejercicios.eje_grupo_muscular;
    maquina= _ejercicios.maq_nombre;
    equipo= _ejercicios.equ_nombre;
    RETURN NEXT;
   END LOOP;
END; $$
  LANGUAGE plpgsql;

  ---------------------------------- Funcion que devuelve los planes de un usuario --------------------------------------

CREATE OR REPLACE FUNCTION FO_M03_get_plan(usuario_CI int)
  RETURNS TABLE (idPlan int, nombre character varying, descrip character varying)
   AS $$
   DECLARE
      _plan    record;
    BEGIN
      FOR _plan IN (SELECT p.pla_id, p.pla_nombre, p.pla_descripcion
              FROM plan p, usuario u
              WHERE p.fk_usuario=u.usu_id and u.usu_id=usuario_CI)
      LOOP
          idPlan = _plan.pla_id;
          nombre = _plan.pla_nombre;
          descrip = _plan.pla_descripcion;
        RETURN NEXT;
      END LOOP;
  END; $$
  LANGUAGE plpgsql;

-----------------------------------------------------------------------------------------------------------------------
--------------------------------- Funcion que devuelve las rutinas de un plan ------------------------------------------

CREATE OR REPLACE FUNCTION FO_M03_get_rutinaplan(usuario_CI int)
  RETURNS TABLE (nombreR character varying, dia character varying, numEjerc int)
    AS $$
    DECLARE
      _rutina    record;
    BEGIN
      FOR _rutina IN (SELECT r.rut_nombre, r.rut_dia, (select count(*) from ejercicio_maquina_equipo eme where eme.fk_rutina=r.rut_id ) as ejercicio
              FROM rutina r, usuario u, plan p
              WHERE r.fk_usuario=u.usu_id and r.fk_plan=p.pla_id and u.usu_id = usuario_CI)
      LOOP
          nombreR = _rutina.rut_nombre;
          dia = _rutina.rut_dia;
            numEjerc= _rutina.ejercicio;
        RETURN NEXT;
      END LOOP;
    END; $$
    LANGUAGE plpgsql;

-----------------------------------------------------------------------------------------------------------------------
-------------------------------- Funcion que ELIMINA un plan del usuario ----------------------------------------------

CREATE OR REPLACE FUNCTION FO_M03_eliminaplan(usuario_CI int, nombre character varying)
  RETURNS void AS $$
    DECLARE
    BEGIN
      DELETE FROM plan
      WHERE pla_nombre = nombre and fk_usuario = usuario_CI;
    END; $$
LANGUAGE plpgsql;

-----------------------------------------------------------------------------------------------------------------------
-------------------------------- Funcion que AGREGA un plan al usuario ------------------------------------------------

CREATE OR REPLACE FUNCTION FO_M03_set_plan(idUsuario int, nombrePlan character varying, descrip character varying)
  RETURNS VOID
   AS $$
DECLARE
BEGIN
       insert into plan (pla_nombre, pla_descripcion, fk_usuario) values (nombrePlan, descrip, idUsuario);
END; $$
  LANGUAGE plpgsql;

-----------------------------------------------------------------------------------------------------------------------
-------------------------------- Funcion que MODIFICA un plan del usuario ---------------------------------------------

CREATE OR REPLACE FUNCTION FO_M03_modificar_plan(idUsuario int, nombrePlan character varying, descrip character varying,
                                                  nombreModif character varying, descripModif character varying, idPlan int)
  RETURNS VOID
   AS $$
DECLARE
BEGIN
       update plan set (pla_nombre, pla_descripcion) = (nombreModif, descripModif) where fk_usuario= idUsuario
                                                        and pla_id=idPlan;
END; $$
  LANGUAGE plpgsql;

------------------------------------------------------------------------------------------------------------------------

  ---***********************************************RUTINAS PARA M04******************************************************

-------Lista de ejercicios realizada por un usuario--------------------------------------------
  CREATE OR REPLACE FUNCTION FO_M03_get_ejerciciosRealizados(idUsuario int)
  RETURNS TABLE(nombre character varying)
   AS $$
DECLARE
   _ejercicios    record;
BEGIN
   FOR _ejercicios IN(select  distinct(eje.eje_nombre) from ejercicio as eje 
inner join ejercicio_maquina_equipo as eme on eje.eje_id= eme.fk_ejercicio 
inner join trabajo_rutina as tr on tr.fk_eje_maq_equ1 = eme.eme_id 
inner join rutina as rut on rut.rut_id=eme.fk_rutina 
inner join usuario as usu on usu.usu_id= rut.fk_usuario where usu.usu_id= idUsuario )
   LOOP
    nombre = _ejercicios.eje_nombre;
    RETURN NEXT;
   END LOOP;
END; $$
  LANGUAGE plpgsql;
  
  
------Lista de ejercicios con peso promedio por mes de los ultimos 6 meses----------------------------------------
CREATE OR REPLACE FUNCTION FO_M03_get_Ejercicios6meses( _idUsuario int, _ejercicio character varying )
  RETURNS TABLE(mes int, repeticion int, peso numeric(7,2), unidad character varying)
   AS $$
DECLARE
   _ejercicios    record;
BEGIN
   FOR _ejercicios IN(select Extract(Month from tr.tr_fecha) as mes, sum(ser.ser_repeticion) as repeticion,
                    avg(ser.ser_peso) as peso, ser.ser_unidad as unidad from trabajo_rutina as tr 
					inner join serie as ser on ser.fk_trabajo_rutina= tr.tr_id 
					inner join ejercicio_maquina_equipo as eme on eme_id = tr.fk_eje_maq_equ1
					inner join ejercicio as eje on eje.eje_id= eme.fk_ejercicio
					inner join rutina as rut on eme.fk_rutina = rut.rut_id
					inner join usuario as usu on usu.usu_id = rut.fk_usuario
					where eje.eje_nombre= _ejercicio and usu.usu_id=_idUsuario 
                    and (tr.tr_fecha >= (current_date - interval '6 month')) group by mes, ser.ser_unidad)
   LOOP
    mes = _ejercicios.mes;
    repeticion = _ejercicios.repeticion;
 	peso = ROUND(_ejercicios.peso, 1);
    unidad= _ejercicios.unidad;
    RETURN NEXT;
   END LOOP;
END; $$
  LANGUAGE plpgsql;  


 ------Lista de ejercicios con peso promedio por mes de los ultimos 5 aï¿½os----------------------------------------
CREATE OR REPLACE FUNCTION FO_M03_get_Ejercicios5anios( _idUsuario int, _ejercicio character varying )
  RETURNS TABLE(mes int, repeticion int, peso decimal, unidad character varying)
   AS $$
DECLARE
   _ejercicios    record;
BEGIN
   FOR _ejercicios IN(select Extract(Year from tr.tr_fecha) as mes, sum(ser.ser_repeticion) as repeticion, avg(ser.ser_peso) as peso, ser.ser_unidad as unidad from trabajo_rutina as tr 
						inner join serie as ser on ser.fk_trabajo_rutina= tr.tr_id 
						inner join ejercicio_maquina_equipo as eme on eme_id = tr.fk_eje_maq_equ1
                        inner join ejercicio as eje on eje.eje_id= eme.fk_ejercicio
                        inner join rutina as rut on eme.fk_rutina = rut.rut_id
                        inner join usuario as usu on usu.usu_id = rut.fk_usuario
                        where eje.eje_nombre= _ejercicio and usu.usu_id=_idUsuario 
                        and (tr.tr_fecha >= (current_date - interval '5 year')) group by mes, ser.ser_unidad)
   LOOP
    mes = _ejercicios.mes;
    repeticion = _ejercicios.repeticion;
 	peso = ROUND(_ejercicios.peso, 2);
    unidad= _ejercicios.unidad;
    RETURN NEXT;
   END LOOP;
END; $$
  LANGUAGE plpgsql;